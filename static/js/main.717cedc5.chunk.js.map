{"version":3,"sources":["Components/numberInput.js","Components/sudoku.js","Components/complete.js","HelperFunctions/saveValue.js","HelperFunctions/generatorSudoku.js","Components/board.js","HelperFunctions/solve.js","Components/header.js","App.js","index.js"],"names":["RenderInputFild","props","radioGroup","push","type","id","value","name","checked","selectedNumber","onChange","callBack","htmlFor","RenderNInput","buttons","i","size","className","NumberInput","Sudoku","useState","board","SetBoard","rows","squ","colGroup","bold","fontWeight","cursor","getFild","j","String","includes","onClick","gameBoard","setGameBoard","amount","replace","style","useEffect","squares","tds","DesplaySolved","solved","newGame","disabled","clickBar","SaveBoard","key","saveValue","length","localStorage","setItem","SaveResources","LoadSolution","getItem","FillArray","splice","CheckRowAndCulumn","arrayIndex","checkRow","checkColumn","filter","number","CheckSquare","squareSize","squareX","squareY","checkSquare","CheckSukoku","checkBoard","JSON","parse","stringify","RemovePencelmark","rowID","culumnID","newBoard","randomNumber","pickerIndex","pickerArr","indexOf","curSquareY","Math","floor","curSquareX","RemoveNumbers","remove","randomIndex","arrOfIndex","removeIndex","sort","random","RandomNewIndex","solveList","forEach","index","GetIndex","MarkOG","numberSize","Board","Array","fill","SetGameBoard","SetSolved","NewGame","square","numArry","map","randomIndexNumber","notFull","arr1","arr2","MakeSudoku","clear","solve","tempGameBoard","NewSolve","highlight","split","trySolve","shift","SolveOne","handleNumberClick","handleClick","seleNumber","App","paams","SetSelectedNumber","Setsize","Setremove","handleInput","e","document","addEventListener","removeEventListener","selectSize","Number","target","defaultValue","min","max","x","y","lengt","checkFild","undefined","find","IsInSolve","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.717cedc5.chunk.js","sourcesContent":["function RenderInputFild(props) {\r\n\tlet radioGroup = []\r\n\r\n\tradioGroup.push(\r\n\t\t<input\r\n\t\t\tkey={\"input\" + props.value}\r\n\t\t\ttype={\"radio\"}\r\n\t\t\tid={\"num\" + props.value}\r\n\t\t\tname={\"radioNumber\"}\r\n\t\t\tvalue={props.value}\r\n\t\t\tchecked={props.selectedNumber == props.value}\r\n\t\t\tonChange={props.callBack}\r\n\t\t/>\r\n\t)\r\n\r\n\tradioGroup.push(<label key={\"labl\" + props.value} htmlFor={\"num\" + props.value}> {props.value} </label>)\r\n\r\n\treturn radioGroup\r\n}\r\n\r\nfunction RenderNInput(props) {\r\n\tlet buttons = []\r\n\tfor (let i = 0; i < props.size; i++) {\r\n\t\tbuttons.push(<RenderInputFild selectedNumber={props.selectedNumber} callBack={props.callBack} value={i + 1} />)\r\n\t}\r\n\r\n\treturn <div className=\"radio-toolbar\"> {buttons} </div>\r\n}\r\n\r\nexport default function NumberInput(props) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<RenderNInput selectedNumber={props.selectedNumber} size={props.size} callBack={props.callBack} />\r\n\t\t</div>\r\n\t)\r\n}","import { useEffect, useState } from \"react\";\r\n\r\nexport default function Sudoku(props) {\r\n\tconst [board, SetBoard] = useState()\r\n\tlet rows = []\r\n\tlet squ = []\r\n\tlet colGroup = []\r\n\r\n\tconst bold = {\r\n\t\tfontWeight: 'bold',\r\n\t\tcursor: \"default\"\r\n\t}\r\n\r\n\tfunction getFild(value, i, j, callBack) {\r\n\r\n\t\tvalue = String(value)\r\n\r\n\r\n\t\tif (value != null && value.includes(\"h\")) { \r\n\t\t\treturn (\r\n\t\t\t\t<td className=\"highlight\" key={`tdK${i}${j}`}  onClick={() => callBack(i, j, props.gameBoard, props.setGameBoard, props.id, props.amount)}>\r\n\t\t\t\t\t{value.replace('h', '')}\r\n\t\t\t\t</td>)\r\n\t\t}\r\n\t\telse if (value != null && value.includes(\"og\")) {\r\n\t\t\treturn (\r\n\t\t\t\t<td style={bold} key={`tdK${i}${j}`}>\r\n\t\t\t\t\t{value.replace('og', '')}\r\n\t\t\t\t</td>)\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn (\r\n\t\t\t\t<td key={`tdK${i}${j}`} onClick={() => callBack(i, j, props.gameBoard, props.setGameBoard, props.id, props.amount)}>\r\n\t\t\t\t\t{value}\r\n\t\t\t\t</td>)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tfor (let i = 0; i < props.squares; i++) {\r\n\t\t\tsqu.push(<col key={'colG' + i} />)\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < (props.size / props.squares); i++) {\r\n\t\t\trows.push(<colgroup key={'colG' + i}>{squ}</colgroup>)\r\n\t\t}\r\n\r\n\t\tlet cusKey = 0\r\n\r\n\t\tfor (let i = 0; i < props.size; i++) {\r\n\t\t\tlet tds = []\r\n\r\n\t\t\tfor (let j = 0; j < props.size; j++) {\r\n\t\t\t\ttds.push(getFild(props.value[i][j], i, j, props.callBack))\r\n\t\t\t}\r\n\t\t\tcolGroup.push(<tr key={'trK' + i}>{tds}</tr>)\r\n\r\n\t\t\tif (i % props.squares == props.squares - 1) {\r\n\t\t\t\trows.push(<tbody key={'tb' + i}>{colGroup}</tbody>)\r\n\t\t\t\tcolGroup = []\r\n\t\t\t}\r\n\t\t\tSetBoard(rows)\r\n\r\n\t\t}\r\n\t}, [props.value])\r\n\r\n\treturn (\r\n\t\t<table className=\"sudokuTable\">\r\n\t\t\t{board}\r\n\t\t</table>\r\n\t)\r\n}","export default function DesplaySolved(props) {\r\n\r\n    return (\r\n        <div className=\"buttonList\">\r\n            {props.solved ?\r\n                <button className=\"button\" type=\"button\" onClick={() => props.newGame(props.size, props.squares)}>Complete</button> :\r\n                <button className=\"button\" type=\"button\" disabled>Incomplete</button>}\r\n\r\n            <button className=\"button\" type=\"button\" onClick={() => props.newGame(props.size, props.squares)}>New Sudoku</button>\r\n            <button className=\"button\" type=\"button\" onClick={() => props.clickBar()}>Get number</button>\r\n        </div>\r\n    )\r\n}","function SaveBoard(board, key) {\r\n\r\n    let saveValue = `${board.length}::${board}`\r\n\r\n    localStorage.setItem(key, saveValue)\r\n}\r\n\r\nfunction SaveResources(key, value) {\r\n    localStorage.setItem(key, value)\r\n}\r\n\r\nfunction LoadResources(key) {\r\n    return Number(localStorage.getItem(key))\r\n}\r\n\r\nfunction LoadSolution(key) {\r\n    return localStorage.getItem(key)\r\n}\r\n\r\nfunction LocalToArray(value) {\r\n    let lengthValue = value.split('::')\r\n\r\n    if (lengthValue.length <= 1) {\r\n        return null\r\n    }\r\n\r\n    let length = lengthValue[0]\r\n\r\n    let splitValue = lengthValue[1].split(',')\r\n\r\n    let count = 0\r\n    let newBoard = []\r\n    for (let i = 0; i < length; i++) {\r\n        newBoard.push([])\r\n        for (let j = 0; j < length; j++) {\r\n            newBoard[i].push(String(splitValue[count]))\r\n            count++\r\n        }\r\n    }\r\n\r\n    return newBoard\r\n}\r\n\r\nexport { SaveBoard, LocalToArray, SaveResources, LoadResources , LoadSolution}","import { SaveResources } from \"./saveValue\"\r\n\r\nfunction FillArray(size) {\r\n    const fullNumberList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n    return fullNumberList.splice(0, size)\r\n}\r\n\r\nfunction CheckRowAndCulumn(arrayIndex, board, size) {\r\n    let checkRow = FillArray(size)\r\n    let checkColumn = FillArray(size)\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        checkRow = checkRow.filter(number => number != board[arrayIndex][i])\r\n        checkColumn = checkColumn.filter(number => number != board[i][arrayIndex])\r\n    }\r\n\r\n    return checkRow.length == 0 && checkColumn.length == 0\r\n}\r\n\r\nfunction CheckSquare(board, size, squareSize, squareX, squareY) {\r\n    let checkSquare = FillArray(size)\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            checkSquare = checkSquare.filter(number => number != board[i + squareY][j + squareX])\r\n        }\r\n    }\r\n    return checkSquare.length == 0 ? true : false\r\n}\r\n\r\nfunction CheckSukoku(size, board, squares) {\r\n    let checkBoard = JSON.parse(JSON.stringify(board))\r\n\r\n    for (let i = 0; i < checkBoard.length; i++) {\r\n        for (let j = 0; j < checkBoard.length; j++) {\r\n\r\n            if (String(checkBoard[i][j]).includes(\"og\")) {\r\n                checkBoard[i][j] = checkBoard[i][j].replace('og', '')\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        if (!CheckRowAndCulumn(i, checkBoard, size))\r\n            return false\r\n    }\r\n\r\n    for (let i = 0; i < squares; i++) {\r\n        for (let j = 0; j < squares; j++) {\r\n            if (!CheckSquare(checkBoard, size, squares, i * squares, j * squares))\r\n                return false\r\n        }\r\n    }\r\n\r\n    return true\r\n}\r\n\r\nfunction MakeSudoku(size, square) {\r\n    let newBoard\r\n    do {\r\n        let numArry = FillArray(size)\r\n        newBoard = Array(size).fill(null).map(() => Array(size).fill(numArry))\r\n        let pickerArr = [[Math.floor(Math.random() * size), Math.floor(Math.random() * size)]]\r\n        let pickerIndex = []\r\n    \r\n        let index, randomNumber, randomIndexNumber\r\n    \r\n        let notFull = true\r\n        while (notFull) {\r\n    \r\n            pickerArr.sort((arr1, arr2) => arr1.length - arr2.length)\r\n    \r\n            index = 0\r\n            if (pickerArr.length > 0) {\r\n    \r\n                if (newBoard[pickerArr[index][0]][pickerArr[index][1]].length > 1) {\r\n    \r\n                    randomIndexNumber = Math.floor(Math.random() * newBoard[pickerArr[index][0]][pickerArr[index][1]].length)\r\n                    randomNumber = newBoard[pickerArr[index][0]][pickerArr[index][1]][randomIndexNumber]\r\n    \r\n                    newBoard[pickerArr[index][0]][pickerArr[index][1]] = [randomNumber]\r\n                    RemovePencelmark(pickerArr[index][0], pickerArr[index][1], newBoard, size, randomNumber, square, pickerIndex, pickerArr)\r\n                }\r\n                pickerArr.splice(index, 1)\r\n                pickerIndex.splice(index, 1)\r\n    \r\n            }\r\n    \r\n            if (pickerArr.length <= 0) {\r\n                notFull = false\r\n            }\r\n        }\r\n        \r\n    } while (!CheckSukoku(size, newBoard, square));\r\n\r\n\r\n    // if (!CheckSukoku(size, newBoard, square)) {\r\n    //     return MakeSudoku(size, square)\r\n    // }\r\n\r\n    return newBoard\r\n}\r\n\r\nfunction RemovePencelmark(rowID, culumnID, newBoard, size, randomNumber, squareSize, pickerIndex, pickerArr) {\r\n\r\n    for (let i = 0; i < size; i++) {\r\n        if (newBoard[rowID][i].length > 1) {\r\n            newBoard[rowID][i] = newBoard[rowID][i].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[rowID][i].length <= 1) {\r\n                RemovePencelmark(rowID, i, newBoard, size, newBoard[rowID][i][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${rowID}${i}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${rowID}${i}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${rowID}${i}`)) {\r\n                pickerIndex.push(`${rowID}${i}`)\r\n                pickerArr.push([rowID, i])\r\n            }\r\n        }\r\n\r\n        if (newBoard[i][culumnID].length > 1) {\r\n            newBoard[i][culumnID] = newBoard[i][culumnID].filter(number => number != randomNumber)\r\n\r\n            if (newBoard[i][culumnID].length <= 1) {\r\n                RemovePencelmark(i, culumnID, newBoard, size, newBoard[i][culumnID][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                if (pickerIndex.includes(`${i}${culumnID}`)) {\r\n                    pickerArr.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                    pickerIndex.splice(pickerIndex.indexOf(`${i}${culumnID}`), 1)\r\n                }\r\n            }\r\n            else if (!pickerIndex.includes(`${i}${culumnID}`)) {\r\n                pickerIndex.push(`${i}${culumnID}`)\r\n                pickerArr.push([i, culumnID])\r\n            }\r\n        }\r\n    }\r\n\r\n    let curSquareY = Math.floor(rowID / squareSize) * squareSize\r\n    let curSquareX = Math.floor(culumnID / squareSize) * squareSize\r\n\r\n    for (let i = 0; i < squareSize; i++) {\r\n        for (let j = 0; j < squareSize; j++) {\r\n            if (newBoard[i + curSquareY][j + curSquareX].length > 1) {\r\n                newBoard[i + curSquareY][j + curSquareX] = newBoard[i + curSquareY][j + curSquareX].filter(number => number != randomNumber)\r\n\r\n                if (newBoard[i + curSquareY][j + curSquareX].length <= 1) {\r\n                    RemovePencelmark(i + curSquareY, j + curSquareX, newBoard, size, newBoard[i + curSquareY][j + curSquareX][0], squareSize, pickerIndex, pickerArr)\r\n\r\n                    if (pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                        pickerArr.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                        pickerIndex.splice(pickerIndex.indexOf(`${i + curSquareY}${j + curSquareX}`), 1)\r\n                    }\r\n                }\r\n                else if (!pickerIndex.includes(`${i + curSquareY}${j + curSquareX}`)) {\r\n                    pickerIndex.push(`${i + curSquareY}${j + curSquareX}`)\r\n                    pickerArr.push([i + curSquareY, j + curSquareX])\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction MarkOG(board) {\r\n\r\n    for (let i = 0; i < board.length; i++) {\r\n        for (let j = 0; j < board.length; j++) {\r\n            if (board[i][j].length > 0) {\r\n                board[i][j] = `${board[i][j]}og`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction RemoveNumbers(board, remove, id) {\r\n\r\n    let size = board.length\r\n    let randomIndex = RandomNewIndex(size, remove)\r\n\r\n    let solveList = []\r\n\r\n    randomIndex.forEach(index => {\r\n        let removeIndex = GetIndex(size, index)\r\n\r\n        solveList.push(`${removeIndex[0]}${removeIndex[1]}${board[removeIndex[0]][removeIndex[1]]}`)\r\n\r\n        board[removeIndex[0]][removeIndex[1]] = []\r\n    });\r\n\r\n    SaveResources(id + \"curSolveList\",solveList)\r\n\r\n    MarkOG(board)\r\n\r\n    return board\r\n}\r\n\r\nfunction RandomNewIndex(size, remove) {\r\n    let arrOfIndex = []\r\n    let removeIndex = []\r\n\r\n    for (let i = 0; i < size * size; i++) {\r\n        arrOfIndex.push(i)\r\n    }\r\n\r\n    arrOfIndex.sort(() => (Math.random() > 0.5) ? 1 : -1);\r\n\r\n    for (let i = 0; i < remove; i++) {\r\n        removeIndex.push(arrOfIndex[i])\r\n    }\r\n\r\n    return removeIndex\r\n}\r\n\r\nfunction GetIndex(size, number) {\r\n    let row = Math.floor(number / size)\r\n    let culumn = number % size\r\n    return [row, culumn]\r\n}\r\n\r\n\r\n\r\nexport { MakeSudoku, RemoveNumbers, CheckSukoku, FillArray, CheckSquare, CheckRowAndCulumn }","import Sudoku from './sudoku'\r\nimport Complete from './complete'\r\nimport { MakeSudoku, RemoveNumbers, CheckSukoku } from '../HelperFunctions/generatorSudoku'\r\nimport { useEffect, useState, useRef } from \"react\"\r\nimport { SaveBoard, LocalToArray, LoadResources, SaveResources } from '../HelperFunctions/saveValue'\r\nimport { CollectResources } from '../HelperFunctions/getResources'\r\nimport { Shop, shopItems } from './shop'\r\nimport { SolveOne, IsInSolve } from '../HelperFunctions/solve'\r\nimport NumberInput from './numberInput'\r\n\r\nlet numberSize\r\n\r\nexport function Board(props) {\r\n    let size = props.size\r\n    let squares = props.squares\r\n    let remove = props.remove\r\n\r\n\r\n    const [gameBoard, SetGameBoard] = useState(Array(size).fill(Array(size).fill(null)))\r\n    const [solved, SetSolved] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        localStorage.clear()\r\n        NewGame(size, squares);\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        SetSolved(CheckSukoku(size, gameBoard, squares))\r\n\r\n    }, [gameBoard])\r\n\r\n\r\n    function NewGame(size, squares) {\r\n        numberSize = size\r\n\r\n        let newBoard = MakeSudoku(size, squares)\r\n        newBoard = RemoveNumbers(newBoard, remove, props.id)\r\n        SetGameBoard(newBoard)\r\n        SaveBoard(newBoard, props.id + `curBoard`)\r\n    }\r\n\r\n    function clickBar() {\r\n        NewSolve(SolveOne(gameBoard, props.id))\r\n    }\r\n\r\n    function NewSolve(solve) {\r\n        if (solve == null) {\r\n            return\r\n        }\r\n\r\n        let name = `${size}x${size}`\r\n\r\n        let tempGameBoard = [...gameBoard]\r\n        tempGameBoard[solve[0]][solve[1]] = String(solve[2] + \"og\")\r\n        SetGameBoard(tempGameBoard)\r\n        SaveBoard(tempGameBoard, `${props.id}curBoard`)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"game\">\r\n                <div className=\"sudoku\">\r\n                    <div>\r\n\r\n                        <Complete\r\n                            solved={solved}\r\n                            newGame={NewGame}\r\n                            squares={squares}\r\n                            size={size}\r\n                            clickBar={clickBar}\r\n                        ></Complete>\r\n\r\n                        <div className=\"container\">\r\n                            <NumberInput selectedNumber={props.selectedNumber} size={numberSize} callBack={props.handleNumberClick} />\r\n                        </div>\r\n\r\n                        <div className=\"container\">\r\n                            <Sudoku\r\n                                size={size}\r\n                                squares={squares}\r\n                                callBack={props.handleClick}\r\n                                value={gameBoard}\r\n                                gameBoard={gameBoard}\r\n                                setGameBoard={SetGameBoard}\r\n                                id={props.id}\r\n                            ></Sudoku>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction useInterval(callBack, amount, active, interval) {\r\n    const savedCallback = useRef();\r\n\r\n    useEffect(() => {\r\n        savedCallback.current = callBack;\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (active) {\r\n            function tick() {\r\n                savedCallback.current(amount);\r\n            }\r\n\r\n            let id = setInterval(tick, interval);\r\n            return () => clearInterval(id);\r\n        }\r\n    });\r\n}","import { LoadSolution, SaveResources } from \"./saveValue\"\r\n\r\nfunction SolveOne(board, id, highlight = false) {\r\n\r\n    let solveList = LoadSolution(id + \"curSolveList\")\r\n\r\n    if (solveList == \"\")\r\n        return\r\n\r\n    solveList = solveList.split(\",\")\r\n\r\n    for (let i = 0; i < solveList.length; i++) {\r\n        let trySolve = solveList[0].split(\"\")\r\n\r\n        if (board[trySolve[0]][trySolve[1]] != trySolve[2]) {\r\n\r\n            solveList.shift()\r\n            if (!highlight)\r\n                SaveResources(id + \"curSolveList\", solveList)\r\n\r\n            return trySolve\r\n        }\r\n        solveList.shift()\r\n    }\r\n}\r\n\r\nfunction IsInSolve(id, checkFild, board){\r\n    let solveList = LoadSolution(id + \"curSolveList\")\r\n\r\n    if (solveList == \"\")\r\n        return false\r\n\r\n    solveList = solveList.split(\",\")\r\n\r\n    if (board[checkFild[0]][checkFild[1]] == checkFild[2])\r\n        return false\r\n\r\n    let sovle = solveList.find(solve => solve == checkFild)\r\n\r\n    return sovle != undefined\r\n}\r\n\r\nexport { SolveOne, IsInSolve }","\r\nexport default function DesplaySolved(props) {\r\n    return (\r\n        <div className=\"topBar\">\r\n            <span className=\"topText\">\r\n                Sudoku\r\n            </span>\r\n            <span className=\"help\">?\r\n            </span>\r\n            <div className=\"hide\">\r\n                Welcome to Sudoku. <br /><br />\r\n\r\n                How to play Sukodu <br />\r\n                - Every square has to contain a single number <br />\r\n                - Only the numbers from 1 through to size can be used<br />\r\n                - Each size x size box can only contain each number from 1 to size once<br />\r\n                - Each vertical column can only contain each number from 1 to size once<br />\r\n                - Each horizontal row can only contain each number from 1 to size once\r\n            </div>\r\n        </div>\r\n    )\r\n}","import './App.css';\r\nimport NumberInput from './Components/numberInput'\r\nimport { useEffect, useState, useRef } from \"react\"\r\nimport { Board } from \"./Components/board\"\r\nimport Header from './Components/header'\r\nimport DisplayResources from './Components/resources'\r\nimport { SaveBoard, LoadResources, SaveResources } from './HelperFunctions/saveValue'\r\nimport { Shop, gobalShopItems } from './Components/shop'\r\nimport { IsInSolve } from './HelperFunctions/solve'\r\nimport { CollectResources } from './HelperFunctions/getResources'\r\n\r\nlet seleNumber = 1\r\n\r\nexport default function App(paams) {\r\n\r\n\tconst [selectedNumber, SetSelectedNumber] = useState(seleNumber)\r\n\tconst [size, Setsize] = useState(9)\r\n\tconst [remove, Setremove] = useState(30)\r\n\r\n\tuseEffect(() => {\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst handleInput = (e) => {\r\n\t\t\tif (e.key <= 9 && e.key != 0) {\r\n\t\t\t\tseleNumber = e.key\r\n\t\t\t\tSetSelectedNumber(e.key)\r\n\t\t\t}\r\n\t\t}\r\n\t\tdocument.addEventListener(\"keydown\", handleInput);\r\n\r\n\t\treturn () => {\r\n\t\t\tdocument.removeEventListener(\"keydown\", handleInput);\r\n\t\t};\r\n\t}, []);\r\n\r\n\r\n\tconst handleNumberClick = (number) => {\r\n\t\tseleNumber = number.target.value\r\n\t\tSetSelectedNumber(number.target.value)\r\n\t}\r\n\r\n\tfunction handleClick(x, y, gameBoard, SetGameBoard, id, amount) {\r\n\t\tif (gameBoard == null || gameBoard.lengt >= seleNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlet tempGameBoard = [...gameBoard]\r\n\t\tif (IsInSolve(id, `${x}${y}${seleNumber}`, gameBoard)) {\r\n\t\t\tlet name = `${gameBoard.length}x${gameBoard.length}`\r\n\r\n\t\t}\r\n\t\ttempGameBoard[x][y] = String(seleNumber)\r\n\t\tSetGameBoard([...tempGameBoard])\r\n\t\tSaveBoard(tempGameBoard, id + \"curBoard\")\r\n\t}\r\n\r\n\tfunction selectSize(size) {\r\n\t\tSetsize(size)\r\n\r\n\t\tif (remove > size * size) {\r\n\t\t\tSetremove(7)\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\r\n\t\t\t<Header></Header>\r\n\t\t\t<div className=\"main\">\r\n\t\t\t\t<div className=\"selecter\">\r\n\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\tSize of sudoku\r\n\t\t\t\t\t\t<select name=\"Size\" onChange={e => selectSize(Number(e.target.value))}>\r\n\t\t\t\t\t\t\t<option value=\"9\">9x9</option>\r\n\t\t\t\t\t\t\t<option value=\"4\">4x4</option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\tRemoved\r\n\t\t\t\t\t\t<input className=\"range\" type=\"range\" id=\"volume\" name=\"volume\" defaultValue={size == 9 ? 30 : 7} value={remove}\r\n\t\t\t\t\t\t\tmin=\"0\" max={size * size} onChange={e => Setremove(Number(e.target.value))} />\r\n\r\n\t\t\t\t\t\t<span id=\"rangeValue\">{remove}</span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"game\">\r\n\t\t\t\t\t{/* <NumberInput selectedNumber={seleNumber} size={size} callBack={handleNumberClick} /> */}\r\n\t\t\t\t\t<Board\r\n\t\t\t\t\t\tid={\"1#\"}\r\n\t\t\t\t\t\tsize={size}\r\n\t\t\t\t\t\tsquares={size == 9 ? 3 : 2}\r\n\t\t\t\t\t\tremove={remove}\r\n\t\t\t\t\t\thandleClick={handleClick}\r\n\t\t\t\t\t\thandleNumberClick={handleNumberClick}\r\n\t\t\t\t\t\tselectedNumber={seleNumber}\r\n\t\t\t\t\t></Board>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}